#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (c) 2016

# Author(s):

#   Trygve Aspenes

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
Run a configured command for configured topic
"""

import sys
import os

def read_arguments():
    """
    Read command line arguments
    Return
    command name, config file and log file
    """
    import argparse

    parser = argparse.ArgumentParser()

    parser.add_argument('-c', '--config_file',
                        type=str,
                        dest='config_file',
                        default='',
                        help="The file containing " +
                        "configuration parameters e.g. pytroll-run-command.cfg")
    parser.add_argument("-n", "--command_name",
                        help="Name of the command",
                        dest="command_name",
                        type=str,
                        default="unknown")
    parser.add_argument("-v", "--verbose",
                        help="print debug messages too",
                        action="store_true")
    parser.add_argument("-l", "--log", help="File to log to",
                        type=str,
                        default=None)

    args = parser.parse_args()

    if args.config_file == '':
        print "Configuration file required! pytroll-run-command.py -c <config-file>"
        sys.exit()
    if args.command_name == '':
        print "Command name required! Use command-line switch -n <command-name>"
        sys.exit()
    else:
        command_name = args.command_name.lower()

    if 'template' in args.config_file:
        print "Template file given as master config, aborting!"
        sys.exit()

    return command_name, args.config_file, args.log


def read_config_file_options(filename, command_name, valid_config=None):
    """
    Read and checks config file
    If ok, return configuration dictionary
    """

    import yaml
    with open(filename, 'r') as stream:
        try:
            config = yaml.load(stream)
            import pprint
            print type(config)
            pp = pprint.PrettyPrinter(indent=4)
            pp.pprint(config)
        except yaml.YAMLError as exc:
            print(exc)

    return config

if __name__ == "__main__":

    """
    Call the various functions that make up the parts of the AAPP processing
    """
    
    #Read the command line argument
    (command_name, config_filename, log_file) = read_arguments()

    if not os.path.isfile(config_filename):
        print "ERROR! Can not find config file: {}".format(config_filename)
        print "Exits!"
        sys.exit()

    config = read_config_file_options(config_filename, command_name)

    #Set up logging
    try:
        LOG = setup_logging(config, log_file)
    except:
        print "Logging setup failed. Check your config"
        #TODO
        #Better error handeling for logging setup
